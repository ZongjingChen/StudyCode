Hello - from c:\Users\23615\.vscode\extensions\jaredly.reason-vscode-1.7.13\bin.native.exe.hot.exe
Previous log location: C:\Users\23615\AppData\Local\Temp\lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/23615/Desktop/TreeRestoration.re","languageId":"reason","version":1,"text":"type tree('a) = EmptyTree | TreeNode(tree('a), 'a, tree('a));\r\n\r\nlet rec inList = (num, list) => {\r\n\tswitch(list){\r\n\t|[] => false\r\n  |[head,...tail]=>{\r\n    if(head == num){\r\n\t\t\ttrue\r\n    }\r\n\t\telse{\r\n      inList(num,tail)\r\n\t\t}\r\n  }\r\n  }\r\n};\r\n\r\nlet rec findLeftNums = (num,list, accum) =>{\r\n\tswitch(list){\r\n    |[] => accum\r\n    |[head,...tail]=>{\r\n\t\t\tif(head == num){\r\n\t\t\t\taccum\r\n    \t}\r\n\t\t\telse{  \r\n  \t\t\tfindLeftNums(num,tail,[head,...accum])\r\n\t\t\t}\r\n  \t}\r\n  }\r\n};\r\n\r\nlet rec findRightRoot = (l1,l2) =>{\r\n\tswitch(l1){\r\n    |[] => 99999\r\n    |[head,...tail] => {\r\n    \tif(inList(head,l2)){\r\n\t\t\t\tfindRightRoot(tail,l2)\t\r\n    \t}\r\n\t\t\telse{\r\n      \thead  \r\n\t\t\t}\r\n  \t}\r\n  }\r\n};\r\n\r\nlet getLeft = (num, list) =>{\r\n  let rec aux = (num, rest,accum) =>{\r\n    switch(rest){\r\n    |[] => accum\r\n    |[head,...tail]=>{\r\n        if(head != num){\r\n          aux(num,tail,[head,...accum])\r\n        }\r\n        else{\r\n          accum  \r\n        }\r\n    \t}\r\n    }\r\n\t}\r\n\r\n\tlet rec reverse = (list,accum) =>{\r\n  \t  switch(list){\r\n        |[] => accum\r\n        |[head,...tail]=>{\r\n        \treverse(tail,[head,...accum])\r\n    \t\t}\r\n    }\r\n\t};\r\n\tlet left = aux(num,list,[])\r\n  reverse(left,[])\r\n};\r\n\r\nlet rec getRight = (num,list) =>{\r\n  switch(list){\r\n    |[] => list\r\n    |[head,...tail] => {\r\n\t\t\tif(head == num){\r\n\t\t\t\tlist\r\n      }\r\n\t\t\telse{\r\n        getRight(num,tail)\r\n\t\t\t}\r\n  \t}\r\n  }\r\n};\r\nlet rec treeRestoration = (l1,l2) => {\r\n\tswitch(l1){\r\n    |[] => EmptyTree\r\n    |[head,...tail]=>{\r\n    let leftNums = findLeftNums(head, l2, []);\r\n\t\tlet rightRoot = findRightRoot(tail, leftNums);\r\n\t\tlet right = getRight(rightRoot, tail);\r\n\t\tlet left = getLeft(rightRoot, tail);\r\n\t\tTreeNode(treeRestoration(left, l2), head, treeRestoration(right, l2))\r\n  }\r\n  }\r\n};\r\n\r\ntreeRestoration([2,1,4,5,3],[4,1,5,2,3])"}}}
